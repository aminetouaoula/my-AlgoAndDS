class QuickSort{
    constructor(private arr: number[]) { }
    public sort(): number[] {
      this.divide();
      return this.arr;
    }
   private divide(low = 0, high = this.arr.length - 1) {
      if (low < high) {
        let pivot = this.Partitioning(low, high);
        this.divide(low, pivot - 1); // Sort elements before the pivot
        this.divide(pivot+1, high); // Sort elements after the pivot
      }
    }
  private Partitioning(low: number = 0, high: number = this.arr.length - 1): number{
      let pivot = this.arr[low];
      let i = low, j = high;
      while (i !== j) {
          if (this.arr[i] > this.arr[j]) this.swap(i, j);
      
          if (pivot == this.arr[i]) j--;
          else i++;
          
      }
      return i;
     
     
}

swap(i:number, j:number) {
  let temp = this.arr[i];
  this.arr[i] = this.arr[j];
  this.arr[j] = temp;
}
}